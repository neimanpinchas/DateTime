<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Any.hx" private="1" module="Any" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.unit.TestCase" params="" file="C:\Users\ps\AppData\Roaming/haxe/haxelib/hx3compat/1,0,4/std/haxe/unit/TestCase.hx">
		<currentTest public="1">
			<c path="haxe.unit.TestStatus"/>
			<haxe_doc>The current test status of the TestRunner.</haxe_doc>
		</currentTest>
		<setup public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code before the test runs.</haxe_doc>
		</setup>
		<tearDown public="1" set="method" line="71">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code after the test ran.</haxe_doc>
		</tearDown>
		<print public="1" set="method" line="74"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="81">
			<f a="b:?c">
				<x path="Bool"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `true`.</haxe_doc>
		</assertTrue>
		<assertFalse public="1" set="method" line="94">
			<f a="b:?c">
				<x path="Bool"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `false`.</haxe_doc>
		</assertFalse>
		<assertEquals public="1" params="T" set="method" line="107">
			<f a="expected:actual:?c">
				<c path="assertEquals.T"/>
				<c path="assertEquals.T"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `expected` and `actual` are equal.</haxe_doc>
		</assertEquals>
		<new public="1" set="method" line="59"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This unit test class should be extended to create test cases. Each test 
	method created in this extended class should start with the name "test".

	These test methods should call the assertion methods:

	 * `assertTrue(a)`: Succeeds if `a` is `true`.
	 * `assertFalse(a)`: Succeeds if `a` is `false`.
	 * `assertEquals(expected, actual)`: Succeeds if `expected` and `actual`
	   are equal.

	```haxe
	class MyTestCase extends haxe.unit.TestCase {
		function testBasic() {
			assertEquals("A", "A");
		}
	}
	```

	The TestCase can be tested using `TestRunner`. 

	To run code before or after the test, override the functions `setup` 
	and `tearDown`.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="DateTimeIntervalTest" params="" file="test/DateTimeIntervalTest.hx">
		<extends path="haxe.unit.TestCase"/>
		<testCreate public="1" set="method" line="20">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test interval creation
    *</haxe_doc>
		</testCreate>
		<testMath public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test interval math
    *</haxe_doc>
		</testMath>
		<testComparison public="1" set="method" line="54">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test interval comparison
    *</haxe_doc>
		</testComparison>
		<testFormat public="1" set="method" line="106">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test DateTimeInterval.format()
    *</haxe_doc>
		</testFormat>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* DateTimeInterval module tests
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="DateTimeTest" params="" file="test/DateTimeTest.hx">
		<extends path="haxe.unit.TestCase"/>
		<STAMP_01 public="1" get="inline" set="null" expr="1410803495" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1410803495</e></m></meta>
			<haxe_doc>2014-09-15 17:51:35</haxe_doc>
		</STAMP_01>
		<STAMP_02 public="1" get="inline" set="null" expr="94694400" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>94694400</e></m></meta>
			<haxe_doc>1973-01-01 00:00:00</haxe_doc>
		</STAMP_02>
		<STAMP_03 public="1" get="inline" set="null" expr="1409529599" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1409529599</e></m></meta>
			<haxe_doc>2014-08-31 23:59:59</haxe_doc>
		</STAMP_03>
		<STAMP_04 public="1" get="inline" set="null" expr="1330473600" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1330473600</e></m></meta>
			<haxe_doc>2012-02-29 00:00:00</haxe_doc>
		</STAMP_04>
		<STAMP_05 public="1" get="inline" set="null" expr="68255999" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68255999</e></m></meta>
			<haxe_doc>1972-02-29 23:59:59</haxe_doc>
		</STAMP_05>
		<STAMP_06 public="1" get="inline" set="null" expr="5097600" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5097600</e></m></meta>
			<haxe_doc>1970-03-01 00:00:00</haxe_doc>
		</STAMP_06>
		<STAMP_07 public="1" get="inline" set="null" expr="-94694400" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-94694400</e></m></meta>
			<haxe_doc>1967-01-01 00:00:00</haxe_doc>
		</STAMP_07>
		<STAMP_08 public="1" get="inline" set="null" expr="-174975088" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-174975088</e></m></meta>
			<haxe_doc>1964-06-15 19:48:32</haxe_doc>
		</STAMP_08>
		<STAMP_09 public="1" get="inline" set="null" expr="1604188800" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1604188800</e></m></meta>
			<haxe_doc>2020-11-01 00:00:00</haxe_doc>
		</STAMP_09>
		<testLeap public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* DateTime.isLeap(year)
    *</haxe_doc>
		</testLeap>
		<testYear public="1" set="method" line="64">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test year-related methods
    *</haxe_doc>
		</testYear>
		<testMonth public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test month-related methods
    *</haxe_doc>
		</testMonth>
		<testDay public="1" set="method" line="160">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test day-related methods
    *</haxe_doc>
		</testDay>
		<testHour public="1" set="method" line="199">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test hour-related methods
    *</haxe_doc>
		</testHour>
		<testMinute public="1" set="method" line="238">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test minute-related methods
    *</haxe_doc>
		</testMinute>
		<testSecond public="1" set="method" line="277">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test second-related methods
    *</haxe_doc>
		</testSecond>
		<testNow public="1" set="method" line="316">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test DateTime.now()
    *</haxe_doc>
		</testNow>
		<testMake public="1" set="method" line="326">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test Date.make()
    *</haxe_doc>
		</testMake>
		<testMath public="1" set="method" line="365">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test date-time arithmetics
    *</haxe_doc>
		</testMath>
		<testSnap public="1" set="method" line="392">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test snapping
    *</haxe_doc>
		</testSnap>
		<testWeek public="1" set="method" line="435">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test week-related methods
    *</haxe_doc>
		</testWeek>
		<testFormat public="1" set="method" line="466">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test DateTime.format()
    *</haxe_doc>
		</testFormat>
		<testFromIso8601String public="1" set="method" line="529">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test `DateTime.fromString()` for 'YYYY-MM-DDThh:mm:ss[.SSS]Z' format
    *</haxe_doc>
		</testFromIso8601String>
		<testComparisons public="1" set="method" line="539"><f a=""><x path="Void"/></f></testComparisons>
		<testIssue17 public="1" set="method" line="558"><f a=""><x path="Void"/></f></testIssue17>
		<testFromStringISOtz public="1" set="method" line="566"><f a=""><x path="Void"/></f></testFromStringISOtz>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* DateTime module tests
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="List" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="257" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="261" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="265" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Std" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/StringTools.hx">
		<startsWith public="1" set="method" line="226" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<lpad public="1" set="method" line="369" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Sys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		If `v` is `null`, the environment variable is removed.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns a map of the current environment variables and their values
		as of the invocation of the function.

		(python) On Windows, the variable names are always in upper case.

		(cpp)(hl)(neko) On Windows, the variable names match the last capitalization used when modifying
		the variable if the variable has been modified, otherwise they match their capitalization at
		the start of the process.

		On Windows on remaining targets, variable name capitalization matches however they were capitalized
		at the start of the process or at the moment of their creation.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
		</meta>
	</class>
	<class path="Test" params="" file="test/Test.hx">
		<main public="1" get="inline" set="null" line="16" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>* Entry point
    *</haxe_doc>
		</main>
		<haxe_doc>* Unit tests
*</haxe_doc>
	</class>
	<class path="TimezoneTest" params="" file="test/TimezoneTest.hx">
		<extends path="haxe.unit.TestCase"/>
		<testLocalUtc public="1" set="method" line="22">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[* Test local <--> utc conversions
    *]]></haxe_doc>
		</testLocalUtc>
		<testFormat public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Test `format()` method
    *</haxe_doc>
		</testFormat>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Timezone module tests
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Type" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="datetime.DTPeriod" params="" file="src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="n"><x path="Int"/></Year>
		<Month a="n"><x path="Int"/></Month>
		<Day a="n"><x path="Int"/></Day>
		<Hour a="n"><x path="Int"/></Hour>
		<Minute a="n"><x path="Int"/></Minute>
		<Second a="n"><x path="Int"/></Second>
		<Week a="n"><x path="Int"/></Week>
		<haxe_doc>* Time periods for date math
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="datetime.DTWeekDay" params="" file="src/datetime/DateTime.hx" module="datetime.DateTime">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Days of week
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<Sunday public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Sunday>
	<Monday public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Monday>
	<Tuesday public="1" get="inline" set="null" expr="cast 2" line="37" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tuesday>
	<Wednesday public="1" get="inline" set="null" expr="cast 3" line="38" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Wednesday>
	<Thursday public="1" get="inline" set="null" expr="cast 4" line="39" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Thursday>
	<Friday public="1" get="inline" set="null" expr="cast 5" line="40" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Friday>
	<Saturday public="1" get="inline" set="null" expr="cast 6" line="41" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Saturday>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<Sunday public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Sunday>
		<Monday public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Monday>
		<Tuesday public="1" get="inline" set="null" expr="cast 2" line="37" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tuesday>
		<Wednesday public="1" get="inline" set="null" expr="cast 3" line="38" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Wednesday>
		<Thursday public="1" get="inline" set="null" expr="cast 4" line="39" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Thursday>
		<Friday public="1" get="inline" set="null" expr="cast 5" line="40" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Friday>
		<Saturday public="1" get="inline" set="null" expr="cast 6" line="41" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Saturday>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="datetime.DTMonth" params="" file="src/datetime/DateTime.hx" module="datetime.DateTime">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Months
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTMonth_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<January public="1" get="inline" set="null" expr="cast 1" line="50" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</January>
	<February public="1" get="inline" set="null" expr="cast 2" line="51" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</February>
	<March public="1" get="inline" set="null" expr="cast 3" line="52" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</March>
	<April public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</April>
	<May public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</May>
	<June public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</June>
	<July public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</July>
	<August public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</August>
	<September public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</September>
	<October public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</October>
	<November public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</November>
	<December public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
		<x path="datetime.DTMonth"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</December>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTMonth_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<January public="1" get="inline" set="null" expr="cast 1" line="50" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</January>
		<February public="1" get="inline" set="null" expr="cast 2" line="51" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</February>
		<March public="1" get="inline" set="null" expr="cast 3" line="52" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</March>
		<April public="1" get="inline" set="null" expr="cast 4" line="53" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</April>
		<May public="1" get="inline" set="null" expr="cast 5" line="54" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</May>
		<June public="1" get="inline" set="null" expr="cast 6" line="55" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</June>
		<July public="1" get="inline" set="null" expr="cast 7" line="56" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</July>
		<August public="1" get="inline" set="null" expr="cast 8" line="57" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</August>
		<September public="1" get="inline" set="null" expr="cast 9" line="58" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</September>
		<October public="1" get="inline" set="null" expr="cast 10" line="59" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</October>
		<November public="1" get="inline" set="null" expr="cast 11" line="60" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</November>
		<December public="1" get="inline" set="null" expr="cast 12" line="61" static="1">
			<x path="datetime.DTMonth"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</December>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="datetime.DTSnapDirection" params="" file="src/datetime/DateTime.hx" module="datetime.DateTime">
		<this><x path="Int"/></this>
		<haxe_doc>* Snap directions for date/time snapping. See DateTime.snap()
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
	<Up public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Up>
	<Down public="1" get="inline" set="null" expr="cast -1" line="71" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Down>
	<Nearest public="1" get="inline" set="null" expr="cast 0" line="72" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Nearest>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" extern="1" final="1">
		<Up public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Up>
		<Down public="1" get="inline" set="null" expr="cast -1" line="71" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Down>
		<Nearest public="1" get="inline" set="null" expr="cast 0" line="72" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Nearest>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="datetime.DTSnap" params="" file="src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="direction"><x path="datetime.DTSnapDirection"/></Year>
		<Month a="direction"><x path="datetime.DTSnapDirection"/></Month>
		<Day a="direction"><x path="datetime.DTSnapDirection"/></Day>
		<Hour a="direction"><x path="datetime.DTSnapDirection"/></Hour>
		<Minute a="direction"><x path="datetime.DTSnapDirection"/></Minute>
		<Second a="direction"><x path="datetime.DTSnapDirection"/></Second>
		<Week a="direction:day">
			<x path="datetime.DTSnapDirection"/>
			<x path="datetime.DTWeekDay"/>
		</Week>
		<haxe_doc>* Time periods for date/time snapping. See DateTime.snap()
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="datetime.DateTime" params="" file="src/datetime/DateTime.hx">
		<from>
			<icast field="fromTime"><x path="Float"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromDate"><c path="Date"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast field="getTime"><x path="Float"/></icast>
			<icast field="getDate"><c path="Date"/></icast>
		</to>
		<haxe_doc>* DateTime implementation based on amount of seconds since unix epoch.
* By default all date/time data returned is in UTC.
*</haxe_doc>
		<meta>
			<m n=":access"><e>datetime</e></m>
			<m n=":allow"><e>datetime</e></m>
		</meta>
		<impl><class path="datetime._DateTime.DateTime_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" final="1">
	<UNIX_EPOCH_DIFF get="inline" set="null" expr="62135596800.0" line="104" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>62135596800.0</e></m></meta>
		<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
	</UNIX_EPOCH_DIFF>
	<SECONDS_IN_MINUTE public="1" get="inline" set="null" expr="60" line="106" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>60</e></m></meta>
	</SECONDS_IN_MINUTE>
	<SECONDS_IN_HOUR public="1" get="inline" set="null" expr="3600" line="107" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3600</e></m></meta>
	</SECONDS_IN_HOUR>
	<SECONDS_IN_DAY public="1" get="inline" set="null" expr="86400" line="108" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>86400</e></m></meta>
	</SECONDS_IN_DAY>
	<SECONDS_IN_WEEK public="1" get="inline" set="null" expr="604800" line="109" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>604800</e></m></meta>
	</SECONDS_IN_WEEK>
	<SECONDS_IN_YEAR public="1" get="inline" set="null" expr="31536000" line="110" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>31536000</e></m></meta>
	</SECONDS_IN_YEAR>
	<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" expr="31622400" line="111" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>31622400</e></m></meta>
	</SECONDS_IN_LEAP_YEAR>
	<SECONDS_IN_3_YEARS get="inline" set="null" expr="94608000" line="113" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>94608000</e></m></meta>
		<haxe_doc>3 normal years</haxe_doc>
	</SECONDS_IN_3_YEARS>
	<SECONDS_IN_QUAD get="inline" set="null" expr="126230400.0" line="115" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>126230400.0</e></m></meta>
		<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
	</SECONDS_IN_QUAD>
	<SECONDS_IN_HALF_QUAD get="inline" set="null" expr="63072000.0" line="117" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>63072000.0</e></m></meta>
		<haxe_doc>normal year + normal year</haxe_doc>
	</SECONDS_IN_HALF_QUAD>
	<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" expr="63158400.0" line="119" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>63158400.0</e></m></meta>
		<haxe_doc>normal year + leap year</haxe_doc>
	</SECONDS_IN_HALF_QUAD_LEAP>
	<SECONDS_IN_3_PART_QUAD get="inline" set="null" expr="94694400.0" line="121" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>94694400.0</e></m></meta>
		<haxe_doc>normal year + normal year + leap year</haxe_doc>
	</SECONDS_IN_3_PART_QUAD>
	<SECONDS_IN_CQUAD get="inline" set="null" expr="12622780800.0" line="123" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>12622780800.0</e></m></meta>
		<haxe_doc>4 centuries, where the last century is leap (last year is leap), while others are not</haxe_doc>
	</SECONDS_IN_CQUAD>
	<SECONDS_IN_CENTURY get="inline" set="null" expr="3155673600.0" line="125" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>3155673600.0</e></m></meta>
		<haxe_doc>seconds in century, where the last (xx00-year) is not leap</haxe_doc>
	</SECONDS_IN_CENTURY>
	<SECONDS_IN_LEAP_CENTURY get="inline" set="null" expr="3155760000.0" line="127" static="1">
		<x path="Float"/>
		<meta><m n=":value"><e>3155760000.0</e></m></meta>
		<haxe_doc>seconds in century, where the last (xx00-year) is leap</haxe_doc>
	</SECONDS_IN_LEAP_CENTURY>
	<now public="1" get="inline" set="null" line="134" static="1">
		<f a=""><x path="datetime.DateTime"/></f>
		<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
	</now>
	<local public="1" set="method" line="166" static="1">
		<f a=""><x path="datetime.DateTime"/></f>
		<haxe_doc><![CDATA[* Get current local date&time.
    *
    * Returns user's local date/time.]]></haxe_doc>
	</local>
	<make public="1" get="inline" set="null" line="184" static="1">
		<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 1, year : 1970 }</e></m></meta>
		<haxe_doc>* Build DateTime using specified components
    *
    * Builds UTC time.
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
	</make>
	<fromTime public="1" get="inline" set="null" line="201" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *
    * Returns UTC time.</haxe_doc>
	</fromTime>
	<fromString public="1" get="inline" set="null" line="216" static="1">
		<f a="str">
			<c path="String"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' or 'YYYY-MM-DDThh:mm:ss[.SSS]Z' to DateTime
    *
    * Assumes provided string represents UTC time.
    *
    * Returns UTC time.
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
	</fromString>
	<fromDate public="1" get="inline" set="null" line="227" static="1">
		<f a="date">
			<c path="Date"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime instance using unix timestamp retrieved from `date`
    *
    * Returns UTC time.</haxe_doc>
	</fromDate>
	<daysInMonth public="1" get="inline" set="null" line="236" static="1">
		<f a="month:?isLeapYear" v=":false">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
		<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
	</daysInMonth>
	<weeksInYear public="1" set="method" line="245" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
	</weeksInYear>
	<isLeap public="1" get="inline" set="null" line="261" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
	</isLeap>
	<getLocalOffset public="1" set="method" line="274" static="1">
		<f a=""><x path="Int"/></f>
		<haxe_doc>* Get current local time offset (in seconds) relative to UTC time.
    *</haxe_doc>
	</getLocalOffset>
	<_new public="1" get="inline" set="null" line="287" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
	</_new>
	<utc public="1" set="method" line="303" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Assuming this instance is your local time, convert it to UTC using current
    * time offset of your timezone.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you don't care about your timezone and just need to convert your local time to utc,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance</haxe_doc>
	</utc>
	<getYear public="1" set="method" line="312" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
	</getYear>
	<yearStart set="method" line="333" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
	</yearStart>
	<monthStart set="method" line="356" static="1">
		<f a="this:?month" v=":0">
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":value"><e>{ month : 0 }</e></m></meta>
		<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
	</monthStart>
	<getMonthStart public="1" get="inline" set="null" line="366" static="1">
		<f a="this:month">
			<x path="Float"/>
			<x path="datetime.DTMonth"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Get date/time of the first second of specified `month`.
    *</haxe_doc>
	</getMonthStart>
	<isLeapYear public="1" set="method" line="375" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if this is leap year
    *</haxe_doc>
	</isLeapYear>
	<getMonth public="1" get="inline" set="null" line="384" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
	</getMonth>
	<getDay public="1" get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
	</getDay>
	<daysInThisMonth public="1" get="inline" set="null" line="404" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
	</daysInThisMonth>
	<getYearDay public="1" get="inline" set="null" line="414" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
	</getYearDay>
	<weeksInThisYear public="1" set="method" line="423" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
	</weeksInThisYear>
	<getWeekDay public="1" set="method" line="436" static="1">
		<f a="this:?mondayBased" v=":false">
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
		<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
	</getWeekDay>
	<getWeekDayNum public="1" get="inline" set="null" line="455" static="1">
		<f a="this:weekDay:?num" v="::1">
			<x path="Float"/>
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":value"><e>{ num : 1 }</e></m></meta>
		<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
	</getWeekDayNum>
	<getWeek public="1" set="method" line="464" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
	</getWeek>
	<getHour public="1" get="inline" set="null" line="480" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
	</getHour>
	<getHour12 public="1" set="method" line="489" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
	</getHour12>
	<getMinute public="1" get="inline" set="null" line="505" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get minute number (0-59)
    *</haxe_doc>
	</getMinute>
	<getSecond public="1" get="inline" set="null" line="514" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
	</getSecond>
	<add public="1" set="method" line="523" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
	</add>
	<sub set="method" line="542" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
	</sub>
	<snap public="1" set="method" line="561" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTSnap"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
	</snap>
	<toString public="1" set="method" line="580" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
	</toString>
	<format public="1" set="method" line="642" static="1">
		<f a="this:format">
			<x path="Float"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
	</format>
	<getTime public="1" get="inline" set="null" line="652" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
	</getTime>
	<getDate public="1" get="inline" set="null" line="662" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="Date"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* Create standard `Date` class instance using unix timestamp of this one
    *</haxe_doc>
	</getDate>
	<gt get="inline" set="null" line="671" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		<haxe_doc>* DateTime comparison
    *</haxe_doc>
	</gt>
	<gte get="inline" set="null" line="672" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="673" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="674" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<eq get="inline" set="null" line="675" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</eq>
	<neq get="inline" set="null" line="676" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</neq>
	<mathPlus1 get="inline" set="null" line="683" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
	</mathPlus1>
	<mathPlus2 get="inline" set="null" line="684" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>B + A</e></m></meta>
	</mathPlus2>
	<mathPlus3 get="inline" set="null" line="685" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</mathPlus3>
	<mathMinus1 get="inline" set="null" line="686" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</mathMinus1>
	<mathMinus2 get="inline" set="null" line="687" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</mathMinus2>
	<dtiCreate get="inline" set="null" line="694" static="1">
		<f a="this:begin">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
	</dtiCreate>
	<dtiMinus get="inline" set="null" line="695" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</dtiMinus>
	<dtiPlus1 get="inline" set="null" line="696" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</dtiPlus1>
	<dtiPlus2 get="inline" set="null" line="697" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>B + A</e></m></meta>
	</dtiPlus2>
	<dtiMinus2 get="inline" set="null" line="698" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</dtiMinus2>
	<dtiPlus3 get="inline" set="null" line="699" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</dtiPlus3>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":allow"><e>datetime</e></m>
		<m n=":access"><e>datetime</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DateTime_Impl_" params="" file="src/datetime/DateTime.hx" private="1" module="datetime.DateTime" final="1">
		<UNIX_EPOCH_DIFF get="inline" set="null" expr="62135596800.0" line="104" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>62135596800.0</e></m></meta>
			<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
		</UNIX_EPOCH_DIFF>
		<SECONDS_IN_MINUTE public="1" get="inline" set="null" expr="60" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</SECONDS_IN_MINUTE>
		<SECONDS_IN_HOUR public="1" get="inline" set="null" expr="3600" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3600</e></m></meta>
		</SECONDS_IN_HOUR>
		<SECONDS_IN_DAY public="1" get="inline" set="null" expr="86400" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86400</e></m></meta>
		</SECONDS_IN_DAY>
		<SECONDS_IN_WEEK public="1" get="inline" set="null" expr="604800" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>604800</e></m></meta>
		</SECONDS_IN_WEEK>
		<SECONDS_IN_YEAR public="1" get="inline" set="null" expr="31536000" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31536000</e></m></meta>
		</SECONDS_IN_YEAR>
		<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" expr="31622400" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31622400</e></m></meta>
		</SECONDS_IN_LEAP_YEAR>
		<SECONDS_IN_3_YEARS get="inline" set="null" expr="94608000" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>94608000</e></m></meta>
			<haxe_doc>3 normal years</haxe_doc>
		</SECONDS_IN_3_YEARS>
		<SECONDS_IN_QUAD get="inline" set="null" expr="126230400.0" line="115" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>126230400.0</e></m></meta>
			<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
		</SECONDS_IN_QUAD>
		<SECONDS_IN_HALF_QUAD get="inline" set="null" expr="63072000.0" line="117" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>63072000.0</e></m></meta>
			<haxe_doc>normal year + normal year</haxe_doc>
		</SECONDS_IN_HALF_QUAD>
		<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" expr="63158400.0" line="119" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>63158400.0</e></m></meta>
			<haxe_doc>normal year + leap year</haxe_doc>
		</SECONDS_IN_HALF_QUAD_LEAP>
		<SECONDS_IN_3_PART_QUAD get="inline" set="null" expr="94694400.0" line="121" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>94694400.0</e></m></meta>
			<haxe_doc>normal year + normal year + leap year</haxe_doc>
		</SECONDS_IN_3_PART_QUAD>
		<SECONDS_IN_CQUAD get="inline" set="null" expr="12622780800.0" line="123" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>12622780800.0</e></m></meta>
			<haxe_doc>4 centuries, where the last century is leap (last year is leap), while others are not</haxe_doc>
		</SECONDS_IN_CQUAD>
		<SECONDS_IN_CENTURY get="inline" set="null" expr="3155673600.0" line="125" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3155673600.0</e></m></meta>
			<haxe_doc>seconds in century, where the last (xx00-year) is not leap</haxe_doc>
		</SECONDS_IN_CENTURY>
		<SECONDS_IN_LEAP_CENTURY get="inline" set="null" expr="3155760000.0" line="127" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3155760000.0</e></m></meta>
			<haxe_doc>seconds in century, where the last (xx00-year) is leap</haxe_doc>
		</SECONDS_IN_LEAP_CENTURY>
		<now public="1" get="inline" set="null" line="134" static="1">
			<f a=""><x path="datetime.DateTime"/></f>
			<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
		</now>
		<local public="1" set="method" line="166" static="1">
			<f a=""><x path="datetime.DateTime"/></f>
			<haxe_doc><![CDATA[* Get current local date&time.
    *
    * Returns user's local date/time.]]></haxe_doc>
		</local>
		<make public="1" get="inline" set="null" line="184" static="1">
			<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":value"><e>{ second : 0, minute : 0, hour : 0, day : 1, month : 1, year : 1970 }</e></m></meta>
			<haxe_doc>* Build DateTime using specified components
    *
    * Builds UTC time.
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
		</make>
		<fromTime public="1" get="inline" set="null" line="201" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *
    * Returns UTC time.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="216" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' or 'YYYY-MM-DDThh:mm:ss[.SSS]Z' to DateTime
    *
    * Assumes provided string represents UTC time.
    *
    * Returns UTC time.
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
		</fromString>
		<fromDate public="1" get="inline" set="null" line="227" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime instance using unix timestamp retrieved from `date`
    *
    * Returns UTC time.</haxe_doc>
		</fromDate>
		<daysInMonth public="1" get="inline" set="null" line="236" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
		</daysInMonth>
		<weeksInYear public="1" set="method" line="245" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
		</weeksInYear>
		<isLeap public="1" get="inline" set="null" line="261" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
		</isLeap>
		<getLocalOffset public="1" set="method" line="274" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get current local time offset (in seconds) relative to UTC time.
    *</haxe_doc>
		</getLocalOffset>
		<_new public="1" get="inline" set="null" line="287" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
		</_new>
		<utc public="1" set="method" line="303" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Assuming this instance is your local time, convert it to UTC using current
    * time offset of your timezone.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you don't care about your timezone and just need to convert your local time to utc,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance</haxe_doc>
		</utc>
		<getYear public="1" set="method" line="312" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
		</getYear>
		<yearStart set="method" line="333" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
		</yearStart>
		<monthStart set="method" line="356" static="1">
			<f a="this:?month" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ month : 0 }</e></m></meta>
			<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
		</monthStart>
		<getMonthStart public="1" get="inline" set="null" line="366" static="1">
			<f a="this:month">
				<x path="Float"/>
				<x path="datetime.DTMonth"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Get date/time of the first second of specified `month`.
    *</haxe_doc>
		</getMonthStart>
		<isLeapYear public="1" set="method" line="375" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this is leap year
    *</haxe_doc>
		</isLeapYear>
		<getMonth public="1" get="inline" set="null" line="384" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
		</getMonth>
		<getDay public="1" get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
		</getDay>
		<daysInThisMonth public="1" get="inline" set="null" line="404" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
		</daysInThisMonth>
		<getYearDay public="1" get="inline" set="null" line="414" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
		</getYearDay>
		<weeksInThisYear public="1" set="method" line="423" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
		</weeksInThisYear>
		<getWeekDay public="1" set="method" line="436" static="1">
			<f a="this:?mondayBased" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ mondayBased : false }</e></m></meta>
			<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
		</getWeekDay>
		<getWeekDayNum public="1" get="inline" set="null" line="455" static="1">
			<f a="this:weekDay:?num" v="::1">
				<x path="Float"/>
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":value"><e>{ num : 1 }</e></m></meta>
			<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
		</getWeekDayNum>
		<getWeek public="1" set="method" line="464" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
		</getWeek>
		<getHour public="1" get="inline" set="null" line="480" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
		</getHour>
		<getHour12 public="1" set="method" line="489" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
		</getHour12>
		<getMinute public="1" get="inline" set="null" line="505" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get minute number (0-59)
    *</haxe_doc>
		</getMinute>
		<getSecond public="1" get="inline" set="null" line="514" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
		</getSecond>
		<add public="1" set="method" line="523" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
		</add>
		<sub set="method" line="542" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
		</sub>
		<snap public="1" set="method" line="561" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTSnap"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
		</snap>
		<toString public="1" set="method" line="580" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
		</toString>
		<format public="1" set="method" line="642" static="1">
			<f a="this:format">
				<x path="Float"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
		</format>
		<getTime public="1" get="inline" set="null" line="652" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
		</getTime>
		<getDate public="1" get="inline" set="null" line="662" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* Create standard `Date` class instance using unix timestamp of this one
    *</haxe_doc>
		</getDate>
		<gt get="inline" set="null" line="671" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
			<haxe_doc>* DateTime comparison
    *</haxe_doc>
		</gt>
		<gte get="inline" set="null" line="672" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="673" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="674" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<eq get="inline" set="null" line="675" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</eq>
		<neq get="inline" set="null" line="676" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</neq>
		<mathPlus1 get="inline" set="null" line="683" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
		</mathPlus1>
		<mathPlus2 get="inline" set="null" line="684" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>B + A</e></m></meta>
		</mathPlus2>
		<mathPlus3 get="inline" set="null" line="685" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</mathPlus3>
		<mathMinus1 get="inline" set="null" line="686" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</mathMinus1>
		<mathMinus2 get="inline" set="null" line="687" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</mathMinus2>
		<dtiCreate get="inline" set="null" line="694" static="1">
			<f a="this:begin">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
		</dtiCreate>
		<dtiMinus get="inline" set="null" line="695" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</dtiMinus>
		<dtiPlus1 get="inline" set="null" line="696" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</dtiPlus1>
		<dtiPlus2 get="inline" set="null" line="697" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>B + A</e></m></meta>
		</dtiPlus2>
		<dtiMinus2 get="inline" set="null" line="698" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</dtiMinus2>
		<dtiPlus3 get="inline" set="null" line="699" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</dtiPlus3>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<abstract path="datetime.DateTimeInterval" params="" file="src/datetime/DateTimeInterval.hx">
		<from><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></from>
		<this><c path="datetime.cores.DateTimeIntervalCore"/></this>
		<to><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></to>
		<haxe_doc>* Intervals implementation.
*</haxe_doc>
		<meta><m n=":forward">
	<e>negative</e>
	<e>getYears</e>
	<e>getMonths</e>
	<e>getDays</e>
	<e>getHours</e>
	<e>getMinutes</e>
	<e>getSeconds</e>
	<e>getTotalMonths</e>
	<e>getTotalDays</e>
	<e>getTotalHours</e>
	<e>getTotalMinutes</e>
	<e>getTotalSeconds</e>
	<e>getTotalWeeks</e>
</m></meta>
		<impl><class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval" final="1">
	<create public="1" set="method" line="22" static="1">
		<f a="begin:end">
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
	</create>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>* Constructor.
    *</haxe_doc>
	</_new>
	<invert public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
	</invert>
	<addTo public="1" set="method" line="56" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</addTo>
	<subFrom public="1" set="method" line="66" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</subFrom>
	<toString public="1" set="method" line="75" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
	</toString>
	<sign public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
	</sign>
	<format public="1" get="inline" set="null" line="128" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
	</format>
	<formatPartial public="1" get="inline" set="null" line="144" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="Array"><c path="String"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<haxe_doc>* Formats  each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
	</formatPartial>
	<eq get="inline" set="null" line="153" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
	</eq>
	<gt get="inline" set="null" line="158" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="165" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="166" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="167" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<neq get="inline" set="null" line="168" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</neq>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval" final="1">
		<create public="1" set="method" line="22" static="1">
			<f a="begin:end">
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
		</create>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Constructor.
    *</haxe_doc>
		</_new>
		<invert public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
		</invert>
		<addTo public="1" set="method" line="56" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</addTo>
		<subFrom public="1" set="method" line="66" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</subFrom>
		<toString public="1" set="method" line="75" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
		</toString>
		<sign public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
		</sign>
		<format public="1" get="inline" set="null" line="128" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
		</format>
		<formatPartial public="1" get="inline" set="null" line="144" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* Formats  each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
		</formatPartial>
		<eq get="inline" set="null" line="153" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
		</eq>
		<gt get="inline" set="null" line="158" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="165" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="166" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="167" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<neq get="inline" set="null" line="168" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</neq>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="datetime.Timezone" params="" file="src/datetime/Timezone.hx">
		<from>
			<icast><c path="datetime.data.TimezoneData"/></icast>
			<icast field="get"><c path="String"/></icast>
		</from>
		<this><c path="datetime.data.TimezoneData"/></this>
		<to><icast><c path="datetime.data.TimezoneData"/></icast></to>
		<haxe_doc>* Timezone data.
*</haxe_doc>
		<meta><m n=":forward">
	<e>getAllPeriods</e>
	<e>getPeriodForLocal</e>
	<e>getPeriodForUtc</e>
</m></meta>
		<impl><class path="datetime._Timezone.Timezone_Impl_" params="" file="src/datetime/Timezone.hx" private="1" module="datetime.Timezone" final="1">
	<_local expr="null" line="18" static="1">
		<c path="datetime.data.TimezoneData"/>
		<meta><m n=":value"><e>null</e></m></meta>
		<haxe_doc>cache for local timezone</haxe_doc>
	</_local>
	<loadData public="1" set="method" line="25" static="1">
		<f a="data">
			<c path="String"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Set/overwrite existing timezone database with data loaded from external source.
        Use this method if you load timezone database from external source at runtime.
        You can compile with `-D EXTERNAL_TZ_DB` to avoid embedding timezone databaze at compile time.</haxe_doc>
	</loadData>
	<local public="1" set="method" line="34" static="1">
		<f a=""><x path="datetime.Timezone"/></f>
		<haxe_doc>* Get local timezone on current machine.
    * If timezone cannot be detected, returns UTC zone
    *</haxe_doc>
	</local>
	<getZonesList public="1" get="inline" set="null" line="51" static="1">
		<f a=""><c path="Array"><c path="String"/></c></f>
		<haxe_doc>* Build available timezones list
    *</haxe_doc>
	</getZonesList>
	<get public="1" get="inline" set="null" line="61" static="1">
		<f a="name">
			<c path="String"/>
			<x path="Null"><x path="datetime.Timezone"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Get timezone by IANA timezone name
    *</haxe_doc>
	</get>
	<_new get="inline" set="null" line="70" static="1">
		<f a="tz">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.Timezone"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>* Constructor
    *</haxe_doc>
	</_new>
	<getName public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<c path="datetime.data.TimezoneData"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Get timezone name
    *</haxe_doc>
	</getName>
	<at public="1" get="inline" set="null" line="95" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Find out what was the date/time at specified UTC time in this timezone
    *
    * E.g.
    *
    *   `var utc = DateTime.fromString('2012-01-01 00:00:00');`
    *
    *   `var tz = Timezone.get('Europe/Moscow');`
    *
    *   `tz.at(utc).toString();  // 2012-01-01 04:00:00`</haxe_doc>
	</at>
	<utc public="1" get="inline" set="null" line="104" static="1">
		<f a="this:local">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Convert `local` time in this timezone to utc
    *</haxe_doc>
	</utc>
	<isDst public="1" get="inline" set="null" line="113" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if Daylight Saving time is in effect in this zone at `utc` time
    *</haxe_doc>
	</isDst>
	<getAbbreviation public="1" get="inline" set="null" line="122" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Get timezone abbreviation at specified moment. E.g. EST for Eastern Standart Time
    *</haxe_doc>
	</getAbbreviation>
	<getOffset public="1" get="inline" set="null" line="131" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get time offset relative to UTC time at specified moment.
    *   Returns amount of seconds.</haxe_doc>
	</getOffset>
	<getHHMM public="1" get="inline" set="null" line="140" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get time offset relative to UTC time at specified moment in HHMM format.
    *</haxe_doc>
	</getHHMM>
	<format public="1" get="inline" set="null" line="157" static="1">
		<f a="this:utc:format">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Make a string according to `format`.
    *
    *   - `%z`  The time zone offset. Example: -0500 for US Eastern Time
    *   - `%Z`  The time zone abbreviation. Example: EST for Eastern Standart Time
    *   - `%q`  ISO8691 date/time format. Example: 2014-10-04T19:42:56+00:00
    *
    * After timezone placeholders in `format` are processed `at(utc).format(format)` is called.</haxe_doc>
	</format>
	<toString public="1" set="method" line="166" static="1">
		<f a="this">
			<c path="datetime.data.TimezoneData"/>
			<c path="String"/>
		</f>
		<haxe_doc>* Description
    *</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="datetime._Timezone.Timezone_Impl_" params="" file="src/datetime/Timezone.hx" private="1" module="datetime.Timezone" final="1">
		<_local expr="null" line="18" static="1">
			<c path="datetime.data.TimezoneData"/>
			<meta><m n=":value"><e>null</e></m></meta>
			<haxe_doc>cache for local timezone</haxe_doc>
		</_local>
		<loadData public="1" set="method" line="25" static="1">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set/overwrite existing timezone database with data loaded from external source.
        Use this method if you load timezone database from external source at runtime.
        You can compile with `-D EXTERNAL_TZ_DB` to avoid embedding timezone databaze at compile time.</haxe_doc>
		</loadData>
		<local public="1" set="method" line="34" static="1">
			<f a=""><x path="datetime.Timezone"/></f>
			<haxe_doc>* Get local timezone on current machine.
    * If timezone cannot be detected, returns UTC zone
    *</haxe_doc>
		</local>
		<getZonesList public="1" get="inline" set="null" line="51" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>* Build available timezones list
    *</haxe_doc>
		</getZonesList>
		<get public="1" get="inline" set="null" line="61" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Null"><x path="datetime.Timezone"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Get timezone by IANA timezone name
    *</haxe_doc>
		</get>
		<_new get="inline" set="null" line="70" static="1">
			<f a="tz">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.Timezone"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</_new>
		<getName public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<c path="datetime.data.TimezoneData"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get timezone name
    *</haxe_doc>
		</getName>
		<at public="1" get="inline" set="null" line="95" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Find out what was the date/time at specified UTC time in this timezone
    *
    * E.g.
    *
    *   `var utc = DateTime.fromString('2012-01-01 00:00:00');`
    *
    *   `var tz = Timezone.get('Europe/Moscow');`
    *
    *   `tz.at(utc).toString();  // 2012-01-01 04:00:00`</haxe_doc>
		</at>
		<utc public="1" get="inline" set="null" line="104" static="1">
			<f a="this:local">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Convert `local` time in this timezone to utc
    *</haxe_doc>
		</utc>
		<isDst public="1" get="inline" set="null" line="113" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if Daylight Saving time is in effect in this zone at `utc` time
    *</haxe_doc>
		</isDst>
		<getAbbreviation public="1" get="inline" set="null" line="122" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get timezone abbreviation at specified moment. E.g. EST for Eastern Standart Time
    *</haxe_doc>
		</getAbbreviation>
		<getOffset public="1" get="inline" set="null" line="131" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get time offset relative to UTC time at specified moment.
    *   Returns amount of seconds.</haxe_doc>
		</getOffset>
		<getHHMM public="1" get="inline" set="null" line="140" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get time offset relative to UTC time at specified moment in HHMM format.
    *</haxe_doc>
		</getHHMM>
		<format public="1" get="inline" set="null" line="157" static="1">
			<f a="this:utc:format">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Make a string according to `format`.
    *
    *   - `%z`  The time zone offset. Example: -0500 for US Eastern Time
    *   - `%Z`  The time zone abbreviation. Example: EST for Eastern Standart Time
    *   - `%q`  ISO8691 date/time format. Example: 2014-10-04T19:42:56+00:00
    *
    * After timezone placeholders in `format` are processed `at(utc).format(format)` is called.</haxe_doc>
		</format>
		<toString public="1" set="method" line="166" static="1">
			<f a="this">
				<c path="datetime.data.TimezoneData"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Description
    *</haxe_doc>
		</toString>
	</class>
	<class path="datetime.cores.DateTimeIntervalCore" params="" file="src/datetime/cores/DateTimeIntervalCore.hx">
		<negative public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Indicates if this is negative interval</haxe_doc>
		</negative>
		<begin>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the beginning of this interval</haxe_doc>
		</begin>
		<end>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the end of this interval</haxe_doc>
		</end>
		<years expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of years</haxe_doc>
		</years>
		<months expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of months</haxe_doc>
		</months>
		<days expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of days</haxe_doc>
		</days>
		<hours expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of hours</haxe_doc>
		</hours>
		<minutes expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of minutes</haxe_doc>
		</minutes>
		<seconds expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>amount of seconds</haxe_doc>
		</seconds>
		<getYears public="1" set="method" line="54">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full years in this interval.
    *</haxe_doc>
		</getYears>
		<getMonths public="1" set="method" line="93">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full months in this interval (always less then 12)
    *</haxe_doc>
		</getMonths>
		<getTotalMonths public="1" set="method" line="134">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of months in this interval.
    *   E.g. DateTimeInterval.fromString('(3y,5m)').getTotalMonths() returns 3 * 12 + 5 = 41
    *</haxe_doc>
		</getTotalMonths>
		<getDays public="1" set="method" line="143">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full days in this interval (always less then 31)
    *</haxe_doc>
		</getDays>
		<getTotalDays public="1" set="method" line="177">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of days in this interval.
    *</haxe_doc>
		</getTotalDays>
		<getHours public="1" set="method" line="186">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full hours in this interval (always less then 24)
    *</haxe_doc>
		</getHours>
		<getTotalHours public="1" set="method" line="214">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of hours in this interval.
    *</haxe_doc>
		</getTotalHours>
		<getMinutes public="1" set="method" line="223">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full minutes in this interval (always less then 60)
    *</haxe_doc>
		</getMinutes>
		<getTotalMinutes public="1" set="method" line="247">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of minutes in this interval.
    *</haxe_doc>
		</getTotalMinutes>
		<getSeconds public="1" set="method" line="256">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full seconds in this interval (always less then 60)
    *</haxe_doc>
		</getSeconds>
		<getTotalSeconds public="1" set="method" line="276">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Get total amount of seconds in this interval.
    *</haxe_doc>
		</getTotalSeconds>
		<getTotalWeeks public="1" set="method" line="285">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of weeks in this interval.
    *   Not calendar weeks, but each 7 days.</haxe_doc>
		</getTotalWeeks>
		<new set="method" line="45">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor.
    * Manual instantiation is not allowed.
    *</haxe_doc>
		</new>
		<haxe_doc>* Time interval representation.
*   Stores difference in seconds between two DateTime instances.
*   Amounts of years/months/days/hours/minutes/seconds are calculated accounting leap years.
*   Maximum allowed interval is ~4100 years.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.pack.Decoder" params="" file="src/datetime/utils/pack/Decoder.hx">
		<getInt public="1" set="method" line="23" static="1">
			<f a="bytes:pos">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Read integer value
    *</haxe_doc>
		</getInt>
		<decode public="1" set="method" line="32" static="1">
			<f a="data">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Decode string to Bytes
    *</haxe_doc>
		</decode>
		<getTzMap public="1" set="method" line="46" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<t path="Map">
					<c path="String"/>
					<x path="Int"/>
				</t>
			</f>
			<haxe_doc>* Build map of timezones stored in `bytes` to be able to quickly find any timezone
    *</haxe_doc>
		</getTzMap>
		<getZone public="1" set="method" line="76" static="1">
			<f a="bytes:pos">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="datetime.data.TimezoneData"/>
			</f>
			<haxe_doc>* Get timezone data located at specified `pos` in `bytes`
    *</haxe_doc>
		</getZone>
		<extractAbbreviations get="inline" set="null" line="115" static="1">
			<f a="bytes:pos:abrs">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="Array"><c path="datetime.utils.pack.TZAbr"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>* Extract abbreviations dictionary.
    * Returns position of next byte after last byte of abbreviations dictionary.
    *</haxe_doc>
		</extractAbbreviations>
		<extractOffsets set="method" line="140" static="1">
			<f a="bytes:pos:offsets">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>* Extract offsets dictionary.
    * Returns position of next byte after last byte of offsets dictionary.
    *</haxe_doc>
		</extractOffsets>
		<extractDstRule set="method" line="177" static="1">
			<f a="bytes:pos:periods:idx:abrs:offsets">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="Array"><c path="datetime.utils.pack.IPeriod"/></c>
				<x path="Int"/>
				<c path="Array"><c path="datetime.utils.pack.TZAbr"/></c>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>* Extract DstRule from position `pos` at `bytes` and assign it to `periods` at index `idx`
    * Returns position of next byte after last byte of extracted DstRule
    *</haxe_doc>
		</extractDstRule>
		<extractTZPeriod set="method" line="260" static="1">
			<f a="bytes:pos:periods:idx:abrs:offsets">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="Array"><c path="datetime.utils.pack.IPeriod"/></c>
				<x path="Int"/>
				<c path="Array"><c path="datetime.utils.pack.TZAbr"/></c>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>* Extract TZPeriod from position `pos` at `bytes` and assign it to `periods` at index `idx`
    * Returns position of next byte after last byte of extracted TZPeriod
    *</haxe_doc>
		</extractTZPeriod>
		<extractUtc set="method" line="287" static="1">
			<f a="bytes:pos:period">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="datetime.utils.pack.IPeriod"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Extract utc timestamp from position `pos` at `bytes`.
    * Returns position of the next byte after utc timestamp.
    *</haxe_doc>
		</extractUtc>
		<haxe_doc>* Uncompress tz data compressed with tools/TZBuilder
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/crypto/BaseCode.hx">
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="datetime.data.TimezoneData" params="" file="src/datetime/data/TimezoneData.hx">
		<tzdata expr="{
	datetime.utils.MacroUtils.embedString(&quot;tz.dat&quot;).join(&quot;&quot;).decode();
}" line="24" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>{
	datetime.utils.MacroUtils.embedString("tz.dat").join("").decode();
}</e></m></meta>
			<haxe_doc>tzdata</haxe_doc>
		</tzdata>
		<tzmap expr="null" line="27" static="1">
			<t path="Map">
				<c path="String"/>
				<x path="Int"/>
			</t>
			<meta><m n=":value"><e>null</e></m></meta>
			<haxe_doc>tzmap</haxe_doc>
		</tzmap>
		<cache expr="new Map()" line="29" static="1">
			<t path="Map">
				<c path="String"/>
				<c path="datetime.data.TimezoneData"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
			<haxe_doc>cache of already instantiated timezones</haxe_doc>
		</cache>
		<loadData public="1" set="method" line="39" static="1">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set/overwrite existing timezone database with data loaded from external source.</haxe_doc>
		</loadData>
		<buildTzMap set="method" line="43" static="1"><f a=""><x path="Void"/></f></buildTzMap>
		<get set="method" line="52" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Null"><c path="datetime.data.TimezoneData"/></x>
			</f>
			<haxe_doc>* Get timezone data by IANA timezone `name` (e.g. `Europe/Moscow`)
    *</haxe_doc>
		</get>
		<zonesList set="method" line="72" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>* Build list of available timezones
    *</haxe_doc>
		</zonesList>
		<name set="null">
			<c path="String"/>
			<haxe_doc>IANA timezone name</haxe_doc>
		</name>
		<periods>
			<c path="Array"><c path="datetime.utils.pack.IPeriod"/></c>
			<haxe_doc>periods between time switches in this timezone</haxe_doc>
		</periods>
		<getPeriodForUtc public="1" set="method" line="92">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<c path="datetime.utils.pack.TZPeriod"/>
			</f>
			<haxe_doc>* Find appropriate period between time changes for specified `utc` time
    *</haxe_doc>
		</getPeriodForUtc>
		<getPeriodForLocal public="1" set="method" line="107">
			<f a="dt">
				<x path="datetime.DateTime"/>
				<c path="datetime.utils.pack.TZPeriod"/>
			</f>
			<haxe_doc>* Find appropriate period between time changes for specified `dt` local time
    *</haxe_doc>
		</getPeriodForLocal>
		<getAllPeriods public="1" set="method" line="123">
			<f a=""><c path="Array"><c path="datetime.utils.pack.TZPeriod"/></c></f>
			<haxe_doc>* Build an array of all periods between time switches in this zone
    *</haxe_doc>
		</getAllPeriods>
		<new set="method" line="83">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</new>
		<haxe_doc>* List of all timezones
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeIntervalUtils" params="" file="src/datetime/utils/DateTimeIntervalUtils.hx">
		<strftime set="method" line="21" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<formatPartial set="method" line="106" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* Format each string in `format` but only fill one placeholder in each string.
    *</haxe_doc>
		</formatPartial>
		<new set="method" line="199">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTimeInterval
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeMonthUtils" params="" file="src/datetime/utils/DateTimeMonthUtils.hx">
		<days set="method" line="19" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Returns amount of days in specified month (1-12)
    *</haxe_doc>
		</days>
		<getMonth set="method" line="41" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get month number based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonth>
		<getMonthDay set="method" line="75" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Get day number (1-31) based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonthDay>
		<toSeconds set="method" line="109" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ isLeapYear : false }</e></m></meta>
			<haxe_doc>* Convert month number to amount of seconds passed since year start
    *</haxe_doc>
		</toSeconds>
		<new set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Month-related helper methods
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeSnapUtils" params="" file="src/datetime/utils/DateTimeSnapUtils.hx">
		<snapYear set="method" line="22" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest year.
    * Returns unix timestamp.</haxe_doc>
		</snapYear>
		<snapMonth set="method" line="48" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest month
    * Returns unix timestamp</haxe_doc>
		</snapMonth>
		<snapDay set="method" line="76" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest day
    * Returns unix timestamp</haxe_doc>
		</snapDay>
		<snapHour set="method" line="91" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest hour
    * Returns unix timestamp</haxe_doc>
		</snapHour>
		<snapMinute set="method" line="106" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest minute
    * Returns unix timestamp</haxe_doc>
		</snapMinute>
		<snapWeek set="method" line="121" static="1">
			<f a="dt:direction:required">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest `required` week day
    * Returns unix timestamp</haxe_doc>
		</snapWeek>
		<new set="method" line="155">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Snap implementations
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeUtils" params="" file="src/datetime/utils/DateTimeUtils.hx">
		<fromString set="method" line="22" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse string into DateTime
    *</haxe_doc>
		</fromString>
		<parse set="method" line="42" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse string to DateTime
    *</haxe_doc>
		</parse>
		<fromIsoString set="method" line="73" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse iso string into DateTime
    *</haxe_doc>
		</fromIsoString>
		<clamp params="T" get="inline" set="null" line="103" static="1">
			<f a="value:min:max">
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
			</f>
			<haxe_doc>* Make sure `value` is not less than `min` and not greater than `max`
    *</haxe_doc>
		</clamp>
		<yearToStamp set="method" line="112" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Convert year number (4 digits) to DateTime-timestamp (seconds since 1 a.d.)
    *</haxe_doc>
		</yearToStamp>
		<addYear set="method" line="127" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of years to `dt`.
    * Returns unix timestamp.</haxe_doc>
		</addYear>
		<addMonth set="method" line="142" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of months to `dt`
    *</haxe_doc>
		</addMonth>
		<getWeekDayNum set="method" line="171" static="1">
			<f a="dt:weekDay:num">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Get unix timestamp of a specified `weekDay` in this month, which is the `num`st in current month.
    *</haxe_doc>
		</getWeekDayNum>
		<strftime set="method" line="196" static="1">
			<f a="dt:format">
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<new set="method" line="297">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTime
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.MacroUtils" params="" file="src/datetime/utils/MacroUtils.hx">
		<CONST_STRING_MAX_LENGTH get="inline" set="null" expr="16000" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16000</e></m></meta>
		</CONST_STRING_MAX_LENGTH>
		<haxe_doc>* Various macro utilities
*</haxe_doc>
	</class>
	<class path="datetime.utils.TimezoneDetect" params="" file="src/datetime/utils/TimezoneDetect.hx">
		<HEMISPHERE_SOUTH get="inline" set="null" expr="&quot;s&quot;" line="78" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s"</e></m></meta>
		</HEMISPHERE_SOUTH>
		<timezones expr="[&quot;-720,0&quot; =&gt; &quot;Pacific/Majuro&quot;, &quot;-660,0&quot; =&gt; &quot;Pacific/Pago_Pago&quot;, &quot;-600,1&quot; =&gt; &quot;America/Adak&quot;, &quot;-600,0&quot; =&gt; &quot;Pacific/Honolulu&quot;, &quot;-570,0&quot; =&gt; &quot;Pacific/Marquesas&quot;, &quot;-540,0&quot; =&gt; &quot;Pacific/Gambier&quot;, &quot;-540,1&quot; =&gt; &quot;America/Anchorage&quot;, &quot;-480,1&quot; =&gt; &quot;America/Los_Angeles&quot;, &quot;-480,0&quot; =&gt; &quot;Pacific/Pitcairn&quot;, &quot;-420,0&quot; =&gt; &quot;America/Phoenix&quot;, &quot;-420,1&quot; =&gt; &quot;America/Denver&quot;, &quot;-360,0&quot; =&gt; &quot;America/Guatemala&quot;, &quot;-360,1&quot; =&gt; &quot;America/Chicago&quot;, &quot;-360,1,s&quot; =&gt; &quot;Pacific/Easter&quot;, &quot;-300,0&quot; =&gt; &quot;America/Bogota&quot;, &quot;-300,1&quot; =&gt; &quot;America/New_York&quot;, &quot;-270,0&quot; =&gt; &quot;America/Caracas&quot;, &quot;-240,1&quot; =&gt; &quot;America/Halifax&quot;, &quot;-240,0&quot; =&gt; &quot;America/Santo_Domingo&quot;, &quot;-240,1,s&quot; =&gt; &quot;America/Santiago&quot;, &quot;-210,1&quot; =&gt; &quot;America/St_Johns&quot;, &quot;-180,1&quot; =&gt; &quot;America/Godthab&quot;, &quot;-180,0&quot; =&gt; &quot;America/Argentina/Buenos_Aires&quot;, &quot;-180,1,s&quot; =&gt; &quot;America/Montevideo&quot;, &quot;-120,0&quot; =&gt; &quot;America/Noronha&quot;, &quot;-120,1&quot; =&gt; &quot;America/Noronha&quot;, &quot;-60,1&quot; =&gt; &quot;Atlantic/Azores&quot;, &quot;-60,0&quot; =&gt; &quot;Atlantic/Cape_Verde&quot;, &quot;0,0&quot; =&gt; &quot;UTC&quot;, &quot;0,1&quot; =&gt; &quot;Europe/London&quot;, &quot;60,1&quot; =&gt; &quot;Europe/Berlin&quot;, &quot;60,0&quot; =&gt; &quot;Africa/Lagos&quot;, &quot;60,1,s&quot; =&gt; &quot;Africa/Windhoek&quot;, &quot;120,1&quot; =&gt; &quot;Asia/Beirut&quot;, &quot;120,0&quot; =&gt; &quot;Africa/Johannesburg&quot;, &quot;180,0&quot; =&gt; &quot;Asia/Baghdad&quot;, &quot;180,1&quot; =&gt; &quot;Europe/Moscow&quot;, &quot;210,1&quot; =&gt; &quot;Asia/Tehran&quot;, &quot;240,0&quot; =&gt; &quot;Asia/Dubai&quot;, &quot;240,1&quot; =&gt; &quot;Asia/Baku&quot;, &quot;270,0&quot; =&gt; &quot;Asia/Kabul&quot;, &quot;300,1&quot; =&gt; &quot;Asia/Yekaterinburg&quot;, &quot;300,0&quot; =&gt; &quot;Asia/Karachi&quot;, &quot;330,0&quot; =&gt; &quot;Asia/Kolkata&quot;, &quot;345,0&quot; =&gt; &quot;Asia/Kathmandu&quot;, &quot;360,0&quot; =&gt; &quot;Asia/Dhaka&quot;, &quot;360,1&quot; =&gt; &quot;Asia/Omsk&quot;, &quot;390,0&quot; =&gt; &quot;Asia/Rangoon&quot;, &quot;420,1&quot; =&gt; &quot;Asia/Krasnoyarsk&quot;, &quot;420,0&quot; =&gt; &quot;Asia/Jakarta&quot;, &quot;480,0&quot; =&gt; &quot;Asia/Shanghai&quot;, &quot;480,1&quot; =&gt; &quot;Asia/Irkutsk&quot;, &quot;525,0&quot; =&gt; &quot;Australia/Eucla&quot;, &quot;525,1,s&quot; =&gt; &quot;Australia/Eucla&quot;, &quot;540,1&quot; =&gt; &quot;Asia/Yakutsk&quot;, &quot;540,0&quot; =&gt; &quot;Asia/Tokyo&quot;, &quot;570,0&quot; =&gt; &quot;Australia/Darwin&quot;, &quot;570,1,s&quot; =&gt; &quot;Australia/Adelaide&quot;, &quot;600,0&quot; =&gt; &quot;Australia/Brisbane&quot;, &quot;600,1&quot; =&gt; &quot;Asia/Vladivostok&quot;, &quot;600,1,s&quot; =&gt; &quot;Australia/Sydney&quot;, &quot;630,1,s&quot; =&gt; &quot;Australia/Lord_Howe&quot;, &quot;660,1&quot; =&gt; &quot;Asia/Kamchatka&quot;, &quot;660,0&quot; =&gt; &quot;Pacific/Noumea&quot;, &quot;690,0&quot; =&gt; &quot;Pacific/Norfolk&quot;, &quot;720,1,s&quot; =&gt; &quot;Pacific/Auckland&quot;, &quot;720,0&quot; =&gt; &quot;Pacific/Tarawa&quot;, &quot;765,1,s&quot; =&gt; &quot;Pacific/Chatham&quot;, &quot;780,0&quot; =&gt; &quot;Pacific/Tongatapu&quot;, &quot;780,1,s&quot; =&gt; &quot;Pacific/Apia&quot;, &quot;840,0&quot; =&gt; &quot;Pacific/Kiritimati&quot;]" line="94" static="1">
			<t path="Map">
				<c path="String"/>
				<c path="String"/>
			</t>
			<meta><m n=":value"><e><![CDATA[["-720,0" => "Pacific/Majuro", "-660,0" => "Pacific/Pago_Pago", "-600,1" => "America/Adak", "-600,0" => "Pacific/Honolulu", "-570,0" => "Pacific/Marquesas", "-540,0" => "Pacific/Gambier", "-540,1" => "America/Anchorage", "-480,1" => "America/Los_Angeles", "-480,0" => "Pacific/Pitcairn", "-420,0" => "America/Phoenix", "-420,1" => "America/Denver", "-360,0" => "America/Guatemala", "-360,1" => "America/Chicago", "-360,1,s" => "Pacific/Easter", "-300,0" => "America/Bogota", "-300,1" => "America/New_York", "-270,0" => "America/Caracas", "-240,1" => "America/Halifax", "-240,0" => "America/Santo_Domingo", "-240,1,s" => "America/Santiago", "-210,1" => "America/St_Johns", "-180,1" => "America/Godthab", "-180,0" => "America/Argentina/Buenos_Aires", "-180,1,s" => "America/Montevideo", "-120,0" => "America/Noronha", "-120,1" => "America/Noronha", "-60,1" => "Atlantic/Azores", "-60,0" => "Atlantic/Cape_Verde", "0,0" => "UTC", "0,1" => "Europe/London", "60,1" => "Europe/Berlin", "60,0" => "Africa/Lagos", "60,1,s" => "Africa/Windhoek", "120,1" => "Asia/Beirut", "120,0" => "Africa/Johannesburg", "180,0" => "Asia/Baghdad", "180,1" => "Europe/Moscow", "210,1" => "Asia/Tehran", "240,0" => "Asia/Dubai", "240,1" => "Asia/Baku", "270,0" => "Asia/Kabul", "300,1" => "Asia/Yekaterinburg", "300,0" => "Asia/Karachi", "330,0" => "Asia/Kolkata", "345,0" => "Asia/Kathmandu", "360,0" => "Asia/Dhaka", "360,1" => "Asia/Omsk", "390,0" => "Asia/Rangoon", "420,1" => "Asia/Krasnoyarsk", "420,0" => "Asia/Jakarta", "480,0" => "Asia/Shanghai", "480,1" => "Asia/Irkutsk", "525,0" => "Australia/Eucla", "525,1,s" => "Australia/Eucla", "540,1" => "Asia/Yakutsk", "540,0" => "Asia/Tokyo", "570,0" => "Australia/Darwin", "570,1,s" => "Australia/Adelaide", "600,0" => "Australia/Brisbane", "600,1" => "Asia/Vladivostok", "600,1,s" => "Australia/Sydney", "630,1,s" => "Australia/Lord_Howe", "660,1" => "Asia/Kamchatka", "660,0" => "Pacific/Noumea", "690,0" => "Pacific/Norfolk", "720,1,s" => "Pacific/Auckland", "720,0" => "Pacific/Tarawa", "765,1,s" => "Pacific/Chatham", "780,0" => "Pacific/Tongatapu", "780,1,s" => "Pacific/Apia", "840,0" => "Pacific/Kiritimati"]]]></e></m></meta>
		</timezones>
		<ambiguities expr="[&quot;America/Denver&quot; =&gt; [&quot;America/Denver&quot;, &quot;America/Mazatlan&quot;], &quot;America/Chicago&quot; =&gt; [&quot;America/Chicago&quot;, &quot;America/Mexico_City&quot;], &quot;America/Santiago&quot; =&gt; [&quot;America/Santiago&quot;, &quot;America/Asuncion&quot;, &quot;America/Campo_Grande&quot;], &quot;America/Montevideo&quot; =&gt; [&quot;America/Montevideo&quot;, &quot;America/Sao_Paulo&quot;], &quot;Asia/Beirut&quot; =&gt; [&quot;Asia/Amman&quot;, &quot;Asia/Jerusalem&quot;, &quot;Asia/Beirut&quot;, &quot;Europe/Helsinki&quot;, &quot;Asia/Damascus&quot;], &quot;Pacific/Auckland&quot; =&gt; [&quot;Pacific/Auckland&quot;, &quot;Pacific/Fiji&quot;], &quot;America/Los_Angeles&quot; =&gt; [&quot;America/Los_Angeles&quot;, &quot;America/Santa_Isabel&quot;], &quot;America/New_York&quot; =&gt; [&quot;America/Havana&quot;, &quot;America/New_York&quot;], &quot;America/Halifax&quot; =&gt; [&quot;America/Goose_Bay&quot;, &quot;America/Halifax&quot;], &quot;America/Godthab&quot; =&gt; [&quot;America/Miquelon&quot;, &quot;America/Godthab&quot;], &quot;Asia/Dubai&quot; =&gt; [&quot;Europe/Moscow&quot;], &quot;Asia/Dhaka&quot; =&gt; [&quot;Asia/Yekaterinburg&quot;], &quot;Asia/Jakarta&quot; =&gt; [&quot;Asia/Omsk&quot;], &quot;Asia/Shanghai&quot; =&gt; [&quot;Asia/Krasnoyarsk&quot;, &quot;Australia/Perth&quot;], &quot;Asia/Tokyo&quot; =&gt; [&quot;Asia/Irkutsk&quot;], &quot;Australia/Brisbane&quot; =&gt; [&quot;Asia/Yakutsk&quot;], &quot;Pacific/Noumea&quot; =&gt; [&quot;Asia/Vladivostok&quot;], &quot;Pacific/Tarawa&quot; =&gt; [&quot;Asia/Kamchatka&quot;, &quot;Pacific/Fiji&quot;], &quot;Pacific/Tongatapu&quot; =&gt; [&quot;Pacific/Apia&quot;], &quot;Asia/Baghdad&quot; =&gt; [&quot;Europe/Minsk&quot;], &quot;Asia/Baku&quot; =&gt; [&quot;Asia/Yerevan&quot;, &quot;Asia/Baku&quot;], &quot;Africa/Johannesburg&quot; =&gt; [&quot;Asia/Gaza&quot;, &quot;Africa/Cairo&quot;]]" line="176" static="1">
			<t path="Map">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</t>
			<meta><m n=":value"><e><![CDATA[["America/Denver" => ["America/Denver", "America/Mazatlan"], "America/Chicago" => ["America/Chicago", "America/Mexico_City"], "America/Santiago" => ["America/Santiago", "America/Asuncion", "America/Campo_Grande"], "America/Montevideo" => ["America/Montevideo", "America/Sao_Paulo"], "Asia/Beirut" => ["Asia/Amman", "Asia/Jerusalem", "Asia/Beirut", "Europe/Helsinki", "Asia/Damascus"], "Pacific/Auckland" => ["Pacific/Auckland", "Pacific/Fiji"], "America/Los_Angeles" => ["America/Los_Angeles", "America/Santa_Isabel"], "America/New_York" => ["America/Havana", "America/New_York"], "America/Halifax" => ["America/Goose_Bay", "America/Halifax"], "America/Godthab" => ["America/Miquelon", "America/Godthab"], "Asia/Dubai" => ["Europe/Moscow"], "Asia/Dhaka" => ["Asia/Yekaterinburg"], "Asia/Jakarta" => ["Asia/Omsk"], "Asia/Shanghai" => ["Asia/Krasnoyarsk", "Australia/Perth"], "Asia/Tokyo" => ["Asia/Irkutsk"], "Australia/Brisbane" => ["Asia/Yakutsk"], "Pacific/Noumea" => ["Asia/Vladivostok"], "Pacific/Tarawa" => ["Asia/Kamchatka", "Pacific/Fiji"], "Pacific/Tongatapu" => ["Pacific/Apia"], "Asia/Baghdad" => ["Europe/Minsk"], "Asia/Baku" => ["Asia/Yerevan", "Asia/Baku"], "Africa/Johannesburg" => ["Asia/Gaza", "Africa/Cairo"]]]]></e></m></meta>
			<haxe_doc>* The keys in this object are timezones that we know may be ambiguous after
    * a preliminary scan through the olson_tz object.
    *
    * The array of timezones to compare must be in the order that daylight savings
    * starts for the regions.</haxe_doc>
		</ambiguities>
		<dst_starts expr="[&quot;America/Denver&quot; =&gt; new Date(2011, 2, 13, 3, 0, 0), &quot;America/Mazatlan&quot; =&gt; new Date(2011, 3, 3, 3, 0, 0), &quot;America/Chicago&quot; =&gt; new Date(2011, 2, 13, 3, 0, 0), &quot;America/Mexico_City&quot; =&gt; new Date(2011, 3, 3, 3, 0, 0), &quot;America/Asuncion&quot; =&gt; new Date(2012, 9, 7, 3, 0, 0), &quot;America/Santiago&quot; =&gt; new Date(2012, 9, 3, 3, 0, 0), &quot;America/Campo_Grande&quot; =&gt; new Date(2012, 9, 21, 5, 0, 0), &quot;America/Montevideo&quot; =&gt; new Date(2011, 9, 2, 3, 0, 0), &quot;America/Sao_Paulo&quot; =&gt; new Date(2011, 9, 16, 5, 0, 0), &quot;America/Los_Angeles&quot; =&gt; new Date(2011, 2, 13, 8, 0, 0), &quot;America/Santa_Isabel&quot; =&gt; new Date(2011, 3, 5, 8, 0, 0), &quot;America/Havana&quot; =&gt; new Date(2012, 2, 10, 2, 0, 0), &quot;America/New_York&quot; =&gt; new Date(2012, 2, 10, 7, 0, 0), &quot;Europe/Helsinki&quot; =&gt; new Date(2013, 2, 31, 5, 0, 0), &quot;Pacific/Auckland&quot; =&gt; new Date(2011, 8, 26, 7, 0, 0), &quot;America/Halifax&quot; =&gt; new Date(2011, 2, 13, 6, 0, 0), &quot;America/Goose_Bay&quot; =&gt; new Date(2011, 2, 13, 2, 1, 0), &quot;America/Miquelon&quot; =&gt; new Date(2011, 2, 13, 5, 0, 0), &quot;America/Godthab&quot; =&gt; new Date(2011, 2, 27, 1, 0, 0), &quot;Europe/Moscow&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Amman&quot; =&gt; new Date(2013, 2, 29, 1, 0, 0), &quot;Asia/Beirut&quot; =&gt; new Date(2013, 2, 31, 2, 0, 0), &quot;Asia/Damascus&quot; =&gt; new Date(2013, 3, 6, 2, 0, 0), &quot;Asia/Jerusalem&quot; =&gt; new Date(2013, 2, 29, 5, 0, 0), &quot;Asia/Yekaterinburg&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Omsk&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Krasnoyarsk&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Irkutsk&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Yakutsk&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Vladivostok&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Baku&quot; =&gt; new Date(2013, 2, 31, 4, 0, 0), &quot;Asia/Yerevan&quot; =&gt; new Date(2013, 2, 31, 3, 0, 0), &quot;Asia/Kamchatka&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Asia/Gaza&quot; =&gt; new Date(2010, 2, 27, 4, 0, 0), &quot;Africa/Cairo&quot; =&gt; new Date(2010, 4, 1, 3, 0, 0), &quot;Europe/Minsk&quot; =&gt; new Date(2010, 6, 15, 1, 0, 0), &quot;Pacific/Apia&quot; =&gt; new Date(2010, 10, 1, 1, 0, 0), &quot;Pacific/Fiji&quot; =&gt; new Date(2010, 11, 1, 0, 0, 0), &quot;Australia/Perth&quot; =&gt; new Date(2008, 10, 1, 1, 0, 0)]" line="201" static="1">
			<t path="Map">
				<c path="String"/>
				<c path="Date"/>
			</t>
			<meta><m n=":value"><e><![CDATA[["America/Denver" => new Date(2011, 2, 13, 3, 0, 0), "America/Mazatlan" => new Date(2011, 3, 3, 3, 0, 0), "America/Chicago" => new Date(2011, 2, 13, 3, 0, 0), "America/Mexico_City" => new Date(2011, 3, 3, 3, 0, 0), "America/Asuncion" => new Date(2012, 9, 7, 3, 0, 0), "America/Santiago" => new Date(2012, 9, 3, 3, 0, 0), "America/Campo_Grande" => new Date(2012, 9, 21, 5, 0, 0), "America/Montevideo" => new Date(2011, 9, 2, 3, 0, 0), "America/Sao_Paulo" => new Date(2011, 9, 16, 5, 0, 0), "America/Los_Angeles" => new Date(2011, 2, 13, 8, 0, 0), "America/Santa_Isabel" => new Date(2011, 3, 5, 8, 0, 0), "America/Havana" => new Date(2012, 2, 10, 2, 0, 0), "America/New_York" => new Date(2012, 2, 10, 7, 0, 0), "Europe/Helsinki" => new Date(2013, 2, 31, 5, 0, 0), "Pacific/Auckland" => new Date(2011, 8, 26, 7, 0, 0), "America/Halifax" => new Date(2011, 2, 13, 6, 0, 0), "America/Goose_Bay" => new Date(2011, 2, 13, 2, 1, 0), "America/Miquelon" => new Date(2011, 2, 13, 5, 0, 0), "America/Godthab" => new Date(2011, 2, 27, 1, 0, 0), "Europe/Moscow" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Amman" => new Date(2013, 2, 29, 1, 0, 0), "Asia/Beirut" => new Date(2013, 2, 31, 2, 0, 0), "Asia/Damascus" => new Date(2013, 3, 6, 2, 0, 0), "Asia/Jerusalem" => new Date(2013, 2, 29, 5, 0, 0), "Asia/Yekaterinburg" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Omsk" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Krasnoyarsk" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Irkutsk" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Yakutsk" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Vladivostok" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Baku" => new Date(2013, 2, 31, 4, 0, 0), "Asia/Yerevan" => new Date(2013, 2, 31, 3, 0, 0), "Asia/Kamchatka" => new Date(2010, 6, 15, 1, 0, 0), "Asia/Gaza" => new Date(2010, 2, 27, 4, 0, 0), "Africa/Cairo" => new Date(2010, 4, 1, 3, 0, 0), "Europe/Minsk" => new Date(2010, 6, 15, 1, 0, 0), "Pacific/Apia" => new Date(2010, 10, 1, 1, 0, 0), "Pacific/Fiji" => new Date(2010, 11, 1, 0, 0, 0), "Australia/Perth" => new Date(2008, 10, 1, 1, 0, 0)]]]></e></m></meta>
		</dst_starts>
		<getTimezoneOffset set="method" line="248" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get timezone offset in minutes
    *</haxe_doc>
		</getTimezoneOffset>
		<ambiguity_check set="method" line="264" static="1">
			<f a="tzName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Checks if a timezone has possible ambiguities. I.e timezones that are similar.
    *
    * For example, if the preliminary scan determines that we're in America/Denver.
    * We double check here that we're really there and not in America/Mazatlan.
    *
    * This is done by checking known dates for when daylight savings start for different
    * timezones during 2010 and 2011.</haxe_doc>
		</ambiguity_check>
		<is_ambiguous set="method" line="284" static="1">
			<f a="tzName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if it is possible that the timezone is ambiguous.</haxe_doc>
		</is_ambiguous>
		<get_date_offset set="method" line="294" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the offset in minutes from UTC for a certain date.
    * @param {Date} date
    * @returns {Number}</haxe_doc>
		</get_date_offset>
		<get_date set="method" line="302" static="1">
			<f a="year:month:day">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>* Get specified date with hours/minuts/seconds set to current moment
    * `day` - day of the month</haxe_doc>
		</get_date>
		<get_january_offset set="method" line="309" static="1">
			<f a="?year" v="-1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ year : -1 }</e></m></meta>
		</get_january_offset>
		<get_june_offset set="method" line="314" static="1">
			<f a="?year" v="-1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ year : -1 }</e></m></meta>
		</get_june_offset>
		<date_is_dst set="method" line="327" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Private method.
    * Checks whether a given date is in daylight saving time.
    * If the date supplied is after august, we assume that we're checking
    * for southern hemisphere DST.
    * @param {Date} date
    * @returns {Boolean}</haxe_doc>
		</date_is_dst>
		<lookup_key set="method" line="357" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* This function does some basic calculations to create information about
    * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
    * the script has been tested rather than depend on the year set by the
    * client device.
    *
    * Returns a key that can be used to do lookups in jstz.olson.timezones.
    * eg: "720,1,2".
    *
    * @returns {String}</haxe_doc>
		</lookup_key>
		<detect set="method" line="380" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
    *
    * Returns a primitive object on the format:
    * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
    *
    * @returns timezone name</haxe_doc>
		</detect>
		<dst_start_for set="method" line="402" static="1">
			<f a="tz_name">
				<c path="String"/>
				<x path="Null"><c path="Date"/></x>
			</f>
			<haxe_doc>* This object contains information on when daylight savings starts for
    * different timezones.
    *
    * The list is short for a reason. Often we do not have to be very specific
    * to single out the correct timezone. But when we do, this list comes in
    * handy.
    *
    * Each value is a date denoting when daylight savings starts for that timezone.</haxe_doc>
		</dst_start_for>
		<haxe_doc>* Local timezone detection.
* Notice from original author of `jstimezonedetect`:
*
* `Use Case
* The script is useful if you do not want to disturb your users with questions about what time zone they are in. You can rely on this script to give you a key that is usable for server side datetime normalisations across time zones.
*
* Limitations
* This script does not do geo-location, nor does it care very much about historical time zones.
* So if you are unhappy with the time zone "Europe/Berlin" when the user is in fact in "Europe/Stockholm" - this script is not for you. (They are both identical in modern time).
* Also, if it is important to you to know that in Europe/Simferopool (Ukraine) the UTC offset before 1924 was +2.67, sorry, this script will not help you.
* Time zones are a screwed up thing, generally speaking, and the scope of this script is to solve problems concerning modern time zones, in this case from 2010 and forward.
* `</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.TimezoneUtils" params="" file="src/datetime/utils/TimezoneUtils.hx">
		<format set="method" line="23" static="1">
			<f a="tz:utc:format">
				<x path="datetime.Timezone"/>
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Format date/time with timezone shift
    *</haxe_doc>
		</format>
		<haxe_doc>* Various utilities for timezones
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>datetime</e></m>
			<m n=":allow"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.pack.IPeriod" params="" file="src/datetime/utils/pack/IPeriod.hx" interface="1">
		<utc public="1" set="null">
			<x path="datetime.DateTime"/>
			<haxe_doc>First second of this period</haxe_doc>
		</utc>
		<getTZPeriod public="1" set="method">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<c path="datetime.utils.pack.TZPeriod"/>
			</f>
			<haxe_doc>* Get period from one time switch to another switch, which contains `utc`
    *</haxe_doc>
		</getTZPeriod>
		<getStartingOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get time offset at the first second of this period
    *</haxe_doc>
		</getStartingOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Get string representation of this period
    *</haxe_doc>
		</toString>
		<haxe_doc>* Time period in timezone data
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime.utils.pack</e></m>
			<m n=":allow"><e>TZBuilder</e></m>
		</meta>
	</class>
	<class path="datetime.utils.pack.DstRule" params="" file="src/datetime/utils/pack/DstRule.hx">
		<implements path="datetime.utils.pack.IPeriod"/>
		<utc public="1" set="null">
			<x path="datetime.DateTime"/>
			<haxe_doc>utc time of the first second of this period</haxe_doc>
		</utc>
		<wdayToDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>day of week to switch to DST (in local time)</haxe_doc>
		</wdayToDst>
		<wdayFromDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>day of week to switch to non-DST (in local time)</haxe_doc>
		</wdayFromDst>
		<wdayNumToDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Which one of specified days in month is required to switch to DST.
    * E.g. second Sunday. -1 for last one in this month.</haxe_doc>
		</wdayNumToDst>
		<wdayNumFromDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* Which one of specified days in month is required to switch to DST.
    * E.g. second Sunday. -1 for last one in this month.</haxe_doc>
		</wdayNumFromDst>
		<monthToDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Month in wich time is switching to DST</haxe_doc>
		</monthToDst>
		<monthFromDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Month in wich time is switching from DST</haxe_doc>
		</monthFromDst>
		<timeToDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Local hour,minute,second to switch to DST (in seconds)</haxe_doc>
		</timeToDst>
		<timeFromDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Local hour,minute,second to switch from DST (in seconds)</haxe_doc>
		</timeFromDst>
		<offsetDst public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Time offset during DST phase</haxe_doc>
		</offsetDst>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Time offset during non-DST phase</haxe_doc>
		</offset>
		<abrDst public="1" set="null">
			<c path="String"/>
			<haxe_doc>Timezone abbreviation for DST phase</haxe_doc>
		</abrDst>
		<abr public="1" set="null">
			<c path="String"/>
			<haxe_doc>Timezone abbreviation for non-DST phase</haxe_doc>
		</abr>
		<_period>
			<c path="datetime.utils.pack.TZPeriod"/>
			<haxe_doc>* For internal usage.
    * If user request TZPeriod instance for the same utc several times in a row,
    * we will not calculate period data for every request, but instead return this cached instance</haxe_doc>
		</_period>
		<_lastRequestedUtc><x path="datetime.DateTime"/></_lastRequestedUtc>
		<_noRequestsYet expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</_noRequestsYet>
		<getStartingOffset public="1" set="method" line="74">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get time offset at the first second of this period
    *</haxe_doc>
		</getStartingOffset>
		<getTZPeriod public="1" set="method" line="84">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<c path="datetime.utils.pack.TZPeriod"/>
			</f>
			<haxe_doc>* IPeriod. Get period from one time switch to another switch, which contains `utc`
    * Does not check if `utc` is earlier than this DstRule starts
    *</haxe_doc>
		</getTZPeriod>
		<estimatedSwitch public="1" set="method" line="121">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Find estimated utc time of next switch to/from DST after specified `utc` time
    *</haxe_doc>
		</estimatedSwitch>
		<toString public="1" set="method" line="238">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Get string representation of this rule
    *</haxe_doc>
		</toString>
		<_setPeriodData get="inline" set="null" line="257">
			<f a="isDst">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Description
    *</haxe_doc>
		</_setPeriodData>
		<new public="1" set="method" line="66">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</new>
		<haxe_doc>* Period of strict Daylight Saving Time switching rules
*</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime.utils.pack</e></m>
			<m n=":allow"><e>TZBuilder</e></m>
		</meta>
	</class>
	<class path="datetime.utils.pack.TZAbr" params="" file="src/datetime/utils/pack/TZAbr.hx">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>abbreviation</haxe_doc>
		</name>
		<idx public="1" set="null">
			<x path="Int"/>
			<haxe_doc>abbreviation index in abbreviations dictionary</haxe_doc>
		</idx>
		<new public="1" set="method" line="21">
			<f a="name:idx">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</new>
		<haxe_doc>* Timezone abbreviation structure for encoding timezones
*</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="datetime.utils.pack.TZPeriod" params="" file="src/datetime/utils/pack/TZPeriod.hx">
		<implements path="datetime.utils.pack.IPeriod"/>
		<utc public="1" set="null">
			<x path="datetime.DateTime"/>
			<haxe_doc>utc time to switch to new time offset</haxe_doc>
		</utc>
		<abr public="1" set="null">
			<c path="String"/>
			<haxe_doc>Timezone abbreviation in effect during this offset</haxe_doc>
		</abr>
		<isDst public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether this period is Daylight Saving Time</haxe_doc>
		</isDst>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Time offset in seconds relative to utc</haxe_doc>
		</offset>
		<getTZPeriod public="1" set="method" line="36">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<c path="datetime.utils.pack.TZPeriod"/>
			</f>
			<haxe_doc>* IPeriod. Get period from one time switch to another switch, which contains `utc`
    *</haxe_doc>
		</getTZPeriod>
		<getStartingOffset public="1" set="method" line="45">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get time offset at the first second of this period
    *</haxe_doc>
		</getStartingOffset>
		<toString public="1" set="method" line="54">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Get string representation of this period
    *</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</new>
		<haxe_doc>* Period between two time changes in one zone.
*
* Each line from zdump can be represented by this structure</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>datetime.utils.pack</e></m>
			<m n=":allow"><e>TZBUilder</e></m>
		</meta>
	</class>
	<enum path="haxe.StackItem" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="63" static="1">
		<f a="?fullStack" v="false">
			<x path="Bool"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="71" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="84" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="63" static="1">
			<f a="?fullStack" v="false">
				<x path="Bool"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="71" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="84" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Exception.hx" extern="1">
		<caught set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<c path="haxe.Exception"/>
			</f>
			<haxe_doc>Used internally for wildcard catches like `catch(e:Exception)`.</haxe_doc>
		</caught>
		<thrown set="method" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<haxe_doc>Used internally for wrapping non-throwable values for `throw` expressions.</haxe_doc>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<get_message set="method"><f a=""><c path="String"/></f></get_message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<get_stack set="method"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<get_previous set="method"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<get_native final="1" set="method"><f a=""><x path="Any"/></f></get_native>
		<unwrap set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<new public="1" set="method">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Log" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/NativeStackTrace.hx" extern="1">
		<saveStack public="1" set="method" static="1"><f a="exception">
	<x path="Any"/>
	<x path="Void"/>
</f></saveStack>
		<callStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></callStack>
		<exceptionStack public="1" set="method" static="1"><f a=""><x path="Any"/></f></exceptionStack>
		<toHaxe public="1" set="method" static="1">
			<f a="nativeStackTrace:?skip" v=":0">
				<x path="Any"/>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.ds.IntMap" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<class path="haxe.ds.List" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.exceptions.PosException" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<enum path="haxe.io.Encoding" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.iterators.ArrayIterator" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<namePos>
				<x path="Null"><t path="haxe.macro.Position"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The position of the variable name.</haxe_doc>
			</namePos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<class path="haxe.macro.Error" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<extends path="haxe.Exception"/>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<new public="1" set="method" line="1049">
			<f a="message:pos:?previous">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\Users\ps\AppData\Roaming/haxe/versions/4.3.4/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.unit.TestResult" params="" file="C:\Users\ps\AppData\Roaming/haxe/haxelib/hx3compat/1,0,4/std/haxe/unit/TestResult.hx">
		<m_tests><t path="List"><c path="haxe.unit.TestStatus"/></t></m_tests>
		<success public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` if the unit test succesfully executed the test cases.</haxe_doc>
		</success>
		<add public="1" set="method" line="40"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>String representation from the result of the unit test.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>TestResult contains the result of the executed unit tests.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="C:\Users\ps\AppData\Roaming/haxe/haxelib/hx3compat/1,0,4/std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="60" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Prints the given object/value.

		 * Flash outputs the result in a new `TextField` on stage.
		 * JavaScript outputs the result using `console.log`.
		 * Other targets use native `print` to output the result.

		This function is `dynamic` so it can be overriden in custom setups.</haxe_doc>
		</print>
		<customTrace set="method" line="104" static="1"><f a="v:?p">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null">
			<c path="haxe.unit.TestResult"/>
			<haxe_doc>The unit test results. Available after the `run()` is called.</haxe_doc>
		</result>
		<cases><t path="List"><c path="haxe.unit.TestCase"/></t></cases>
		<add public="1" set="method" line="116">
			<f a="c">
				<c path="haxe.unit.TestCase"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add TestCase instances to the unit test.</haxe_doc>
		</add>
		<run public="1" set="method" line="125">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Runs the unit tests and prints the results.

		@return `true` if the unit test succesfully executed the test cases.</haxe_doc>
		</run>
		<runCase set="method" line="134"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="108"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This class runs unit test cases and prints the result.

	```haxe
	var r = new haxe.unit.TestRunner();
	r.add(new MyTestCase());
	// add other TestCases here

	// finally, run the tests
	r.run();
	```

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="C:\Users\ps\AppData\Roaming/haxe/haxelib/hx3compat/1,0,4/std/haxe/unit/TestStatus.hx">
		<done public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when the unit test is executed.</haxe_doc>
		</done>
		<success public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when succesfully unit tested.</haxe_doc>
		</success>
		<error public="1">
			<c path="String"/>
			<haxe_doc>The error message of the unit test method.</haxe_doc>
		</error>
		<method public="1">
			<c path="String"/>
			<haxe_doc>The method name of the unit test.</haxe_doc>
		</method>
		<classname public="1">
			<c path="String"/>
			<haxe_doc>The class name of the unit test.</haxe_doc>
		</classname>
		<posInfos public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The position information of the unit test.</haxe_doc>
		</posInfos>
		<backtrace public="1">
			<c path="String"/>
			<haxe_doc>The representation of the stack exception.</haxe_doc>
		</backtrace>
		<new public="1" set="method" line="68"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[The status information of a unit test case method.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
</haxe>